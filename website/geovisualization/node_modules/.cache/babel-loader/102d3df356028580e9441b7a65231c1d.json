{"ast":null,"code":"import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { camelize } from '../lib/String';\nconst evtNames = ['click', 'dblclick', 'dragend', 'mousedown', 'mouseout', 'mouseover', 'mouseup', 'recenter'];\n\nconst wrappedPromise = function () {\n  var wrappedPromise = {},\n      promise = new Promise(function (resolve, reject) {\n    wrappedPromise.resolve = resolve;\n    wrappedPromise.reject = reject;\n  });\n  wrappedPromise.then = promise.then.bind(promise);\n  wrappedPromise.catch = promise.catch.bind(promise);\n  wrappedPromise.promise = promise;\n  return wrappedPromise;\n};\n\nexport class Marker extends React.Component {\n  componentDidMount() {\n    this.markerPromise = wrappedPromise();\n    this.renderMarker();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.map !== prevProps.map || this.props.position !== prevProps.position || this.props.icon !== prevProps.icon) {\n      if (this.marker) {\n        this.marker.setMap(null);\n      }\n\n      this.renderMarker();\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.marker) {\n      this.marker.setMap(null);\n    }\n  }\n\n  renderMarker() {\n    const {\n      map,\n      google,\n      position,\n      mapCenter,\n      icon,\n      label,\n      draggable,\n      title,\n      ...props\n    } = this.props;\n\n    if (!google) {\n      return null;\n    }\n\n    let pos = position || mapCenter;\n\n    if (!(pos instanceof google.maps.LatLng)) {\n      pos = new google.maps.LatLng(pos.lat, pos.lng);\n    }\n\n    const pref = {\n      map,\n      position: pos,\n      icon,\n      label,\n      title,\n      draggable,\n      ...props\n    };\n    this.marker = new google.maps.Marker(pref);\n    evtNames.forEach(e => {\n      this.marker.addListener(e, this.handleEvent(e));\n    });\n    this.markerPromise.resolve(this.marker);\n  }\n\n  getMarker() {\n    return this.markerPromise;\n  }\n\n  handleEvent(evt) {\n    return e => {\n      const evtName = `on${camelize(evt)}`;\n\n      if (this.props[evtName]) {\n        this.props[evtName](this.props, this.marker, e);\n      }\n    };\n  }\n\n  render() {\n    return null;\n  }\n\n}\nMarker.propTypes = {\n  position: PropTypes.object,\n  map: PropTypes.object\n};\nevtNames.forEach(e => Marker.propTypes[e] = PropTypes.func);\nMarker.defaultProps = {\n  name: 'Marker'\n};\nexport default Marker;","map":{"version":3,"sources":["/Users/j.kanlaya/Downloads/Mike/website/geovisualization/src/components/common/Marker.js"],"names":["React","Fragment","PropTypes","camelize","evtNames","wrappedPromise","promise","Promise","resolve","reject","then","bind","catch","Marker","Component","componentDidMount","markerPromise","renderMarker","componentDidUpdate","prevProps","props","map","position","icon","marker","setMap","componentWillUnmount","google","mapCenter","label","draggable","title","pos","maps","LatLng","lat","lng","pref","forEach","e","addListener","handleEvent","getMarker","evt","evtName","render","propTypes","object","func","defaultProps","name"],"mappings":"AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAASC,QAAT,QAAyB,eAAzB;AAEA,MAAMC,QAAQ,GAAG,CACf,OADe,EAEf,UAFe,EAGf,SAHe,EAIf,WAJe,EAKf,UALe,EAMf,WANe,EAOf,SAPe,EAQf,UARe,CAAjB;;AAWA,MAAMC,cAAc,GAAG,YAAW;AAC9B,MAAIA,cAAc,GAAG,EAArB;AAAA,MACIC,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC7CJ,IAAAA,cAAc,CAACG,OAAf,GAAyBA,OAAzB;AACAH,IAAAA,cAAc,CAACI,MAAf,GAAwBA,MAAxB;AACH,GAHS,CADd;AAKAJ,EAAAA,cAAc,CAACK,IAAf,GAAsBJ,OAAO,CAACI,IAAR,CAAaC,IAAb,CAAkBL,OAAlB,CAAtB;AACAD,EAAAA,cAAc,CAACO,KAAf,GAAuBN,OAAO,CAACM,KAAR,CAAcD,IAAd,CAAmBL,OAAnB,CAAvB;AACAD,EAAAA,cAAc,CAACC,OAAf,GAAyBA,OAAzB;AAEA,SAAOD,cAAP;AACH,CAXD;;AAaA,OAAO,MAAMQ,MAAN,SAAqBb,KAAK,CAACc,SAA3B,CAAqC;AAE1CC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,aAAL,GAAqBX,cAAc,EAAnC;AACA,SAAKY,YAAL;AACD;;AAEDC,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC5B,QAAK,KAAKC,KAAL,CAAWC,GAAX,KAAmBF,SAAS,CAACE,GAA9B,IACD,KAAKD,KAAL,CAAWE,QAAX,KAAwBH,SAAS,CAACG,QADjC,IAED,KAAKF,KAAL,CAAWG,IAAX,KAAoBJ,SAAS,CAACI,IAFjC,EAEwC;AACpC,UAAI,KAAKC,MAAT,EAAiB;AACb,aAAKA,MAAL,CAAYC,MAAZ,CAAmB,IAAnB;AACH;;AACD,WAAKR,YAAL;AACH;AACF;;AAEDS,EAAAA,oBAAoB,GAAG;AACrB,QAAI,KAAKF,MAAT,EAAiB;AACf,WAAKA,MAAL,CAAYC,MAAZ,CAAmB,IAAnB;AACD;AACF;;AAEDR,EAAAA,YAAY,GAAG;AACb,UAAM;AACJI,MAAAA,GADI;AAEJM,MAAAA,MAFI;AAGJL,MAAAA,QAHI;AAIJM,MAAAA,SAJI;AAKJL,MAAAA,IALI;AAMJM,MAAAA,KANI;AAOJC,MAAAA,SAPI;AAQJC,MAAAA,KARI;AASJ,SAAGX;AATC,QAUF,KAAKA,KAVT;;AAWA,QAAI,CAACO,MAAL,EAAa;AACX,aAAO,IAAP;AACD;;AAED,QAAIK,GAAG,GAAGV,QAAQ,IAAIM,SAAtB;;AACA,QAAI,EAAEI,GAAG,YAAYL,MAAM,CAACM,IAAP,CAAYC,MAA7B,CAAJ,EAA0C;AACxCF,MAAAA,GAAG,GAAG,IAAIL,MAAM,CAACM,IAAP,CAAYC,MAAhB,CAAuBF,GAAG,CAACG,GAA3B,EAAgCH,GAAG,CAACI,GAApC,CAAN;AACD;;AAED,UAAMC,IAAI,GAAG;AACXhB,MAAAA,GADW;AAEXC,MAAAA,QAAQ,EAAEU,GAFC;AAGXT,MAAAA,IAHW;AAIXM,MAAAA,KAJW;AAKXE,MAAAA,KALW;AAMXD,MAAAA,SANW;AAOX,SAAGV;AAPQ,KAAb;AASA,SAAKI,MAAL,GAAc,IAAIG,MAAM,CAACM,IAAP,CAAYpB,MAAhB,CAAuBwB,IAAvB,CAAd;AAEAjC,IAAAA,QAAQ,CAACkC,OAAT,CAAiBC,CAAC,IAAI;AACpB,WAAKf,MAAL,CAAYgB,WAAZ,CAAwBD,CAAxB,EAA2B,KAAKE,WAAL,CAAiBF,CAAjB,CAA3B;AACD,KAFD;AAIA,SAAKvB,aAAL,CAAmBR,OAAnB,CAA2B,KAAKgB,MAAhC;AACD;;AAEDkB,EAAAA,SAAS,GAAG;AACV,WAAO,KAAK1B,aAAZ;AACD;;AAEDyB,EAAAA,WAAW,CAACE,GAAD,EAAM;AACf,WAAQJ,CAAD,IAAO;AACZ,YAAMK,OAAO,GAAI,KAAIzC,QAAQ,CAACwC,GAAD,CAAM,EAAnC;;AACA,UAAI,KAAKvB,KAAL,CAAWwB,OAAX,CAAJ,EAAyB;AACvB,aAAKxB,KAAL,CAAWwB,OAAX,EAAoB,KAAKxB,KAAzB,EAAgC,KAAKI,MAArC,EAA6Ce,CAA7C;AACD;AACF,KALD;AAMD;;AAEDM,EAAAA,MAAM,GAAG;AACP,WAAO,IAAP;AACD;;AA9EyC;AAiF5ChC,MAAM,CAACiC,SAAP,GAAmB;AACjBxB,EAAAA,QAAQ,EAAEpB,SAAS,CAAC6C,MADH;AAEjB1B,EAAAA,GAAG,EAAEnB,SAAS,CAAC6C;AAFE,CAAnB;AAKA3C,QAAQ,CAACkC,OAAT,CAAiBC,CAAC,IAAI1B,MAAM,CAACiC,SAAP,CAAiBP,CAAjB,IAAsBrC,SAAS,CAAC8C,IAAtD;AAEAnC,MAAM,CAACoC,YAAP,GAAsB;AACpBC,EAAAA,IAAI,EAAE;AADc,CAAtB;AAIA,eAAerC,MAAf","sourcesContent":["import React, {Fragment} from 'react'\nimport PropTypes from 'prop-types'\n\nimport { camelize } from '../lib/String'\n\nconst evtNames = [\n  'click',\n  'dblclick',\n  'dragend',\n  'mousedown',\n  'mouseout',\n  'mouseover',\n  'mouseup',\n  'recenter',\n];\n\nconst wrappedPromise = function() {\n    var wrappedPromise = {},\n        promise = new Promise(function (resolve, reject) {\n            wrappedPromise.resolve = resolve;\n            wrappedPromise.reject = reject;\n        });\n    wrappedPromise.then = promise.then.bind(promise);\n    wrappedPromise.catch = promise.catch.bind(promise);\n    wrappedPromise.promise = promise;\n\n    return wrappedPromise;\n}\n\nexport class Marker extends React.Component {\n\n  componentDidMount() {\n    this.markerPromise = wrappedPromise();\n    this.renderMarker();\n  }\n\n  componentDidUpdate(prevProps) {\n    if ((this.props.map !== prevProps.map) ||\n      (this.props.position !== prevProps.position) ||\n      (this.props.icon !== prevProps.icon)) {\n        if (this.marker) {\n            this.marker.setMap(null);\n        }\n        this.renderMarker();\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.marker) {\n      this.marker.setMap(null);\n    }\n  }\n\n  renderMarker() {\n    const {\n      map,\n      google,\n      position,\n      mapCenter,\n      icon,\n      label,\n      draggable,\n      title,\n      ...props\n    } = this.props;\n    if (!google) {\n      return null\n    }\n\n    let pos = position || mapCenter;\n    if (!(pos instanceof google.maps.LatLng)) {\n      pos = new google.maps.LatLng(pos.lat, pos.lng);\n    }\n\n    const pref = {\n      map,\n      position: pos,\n      icon,\n      label,\n      title,\n      draggable,\n      ...props\n    };\n    this.marker = new google.maps.Marker(pref);\n\n    evtNames.forEach(e => {\n      this.marker.addListener(e, this.handleEvent(e));\n    });\n\n    this.markerPromise.resolve(this.marker);\n  }\n\n  getMarker() {\n    return this.markerPromise;\n  }\n\n  handleEvent(evt) {\n    return (e) => {\n      const evtName = `on${camelize(evt)}`\n      if (this.props[evtName]) {\n        this.props[evtName](this.props, this.marker, e);\n      }\n    }\n  }\n\n  render() {\n    return null;\n  }\n}\n\nMarker.propTypes = {\n  position: PropTypes.object,\n  map: PropTypes.object\n}\n\nevtNames.forEach(e => Marker.propTypes[e] = PropTypes.func)\n\nMarker.defaultProps = {\n  name: 'Marker'\n}\n\nexport default Marker"]},"metadata":{},"sourceType":"module"}