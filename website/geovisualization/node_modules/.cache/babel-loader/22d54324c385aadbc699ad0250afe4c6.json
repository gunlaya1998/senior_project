{"ast":null,"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport ReactDOMServer from 'react-dom/server';\nexport class InfoWindow extends React.Component {\n  componentDidMount() {\n    this.renderInfoWindow();\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      google,\n      map\n    } = this.props;\n\n    if (!google || !map) {\n      return;\n    }\n\n    if (map !== prevProps.map) {\n      this.renderInfoWindow();\n    }\n\n    if (this.props.position !== prevProps.position) {\n      this.updatePosition();\n    }\n\n    if (this.props.children !== prevProps.children) {\n      this.updateContent();\n    }\n\n    if (this.props.visible !== prevProps.visible || this.props.marker !== prevProps.marker || this.props.position !== prevProps.position) {\n      this.props.visible ? this.openWindow() : this.closeWindow();\n    }\n  }\n\n  renderInfoWindow() {\n    const {\n      map,\n      google,\n      mapCenter,\n      ...props\n    } = this.props;\n\n    if (!google || !google.maps) {\n      return;\n    }\n\n    const iw = this.infowindow = new google.maps.InfoWindow({\n      content: '',\n      ...props\n    });\n    google.maps.event.addListener(iw, 'closeclick', this.onClose.bind(this));\n    google.maps.event.addListener(iw, 'domready', this.onOpen.bind(this));\n  }\n\n  onOpen() {\n    if (this.props.onOpen) {\n      this.props.onOpen();\n    }\n  }\n\n  onClose() {\n    if (this.props.onClose) {\n      this.props.onClose();\n    }\n  }\n\n  openWindow() {\n    this.infowindow.open(this.props.map, this.props.marker);\n  }\n\n  updatePosition() {\n    let pos = this.props.position;\n\n    if (!(pos instanceof google.maps.LatLng)) {\n      pos = pos && new google.maps.LatLng(pos.lat, pos.lng);\n    }\n\n    this.infowindow.setPosition(pos);\n  }\n\n  updateContent() {\n    const content = this.renderChildren();\n    this.infowindow.setContent(content);\n  }\n\n  closeWindow() {\n    this.infowindow.close();\n  }\n\n  renderChildren() {\n    const {\n      children\n    } = this.props;\n    return ReactDOMServer.renderToString(children);\n  }\n\n  render() {\n    return null;\n  }\n\n}\nInfoWindow.propTypes = {\n  children: PropTypes.element.isRequired,\n  map: PropTypes.object,\n  marker: PropTypes.object,\n  position: PropTypes.object,\n  visible: PropTypes.bool,\n  // callbacks\n  onClose: PropTypes.func,\n  onOpen: PropTypes.func\n};\nInfoWindow.defaultProps = {\n  visible: false\n};\nexport default InfoWindow;","map":{"version":3,"sources":["/Users/j.kanlaya/Downloads/Mike/website/geovisualization/src/components/common/InfoWindow.js"],"names":["React","PropTypes","ReactDOM","ReactDOMServer","InfoWindow","Component","componentDidMount","renderInfoWindow","componentDidUpdate","prevProps","google","map","props","position","updatePosition","children","updateContent","visible","marker","openWindow","closeWindow","mapCenter","maps","iw","infowindow","content","event","addListener","onClose","bind","onOpen","open","pos","LatLng","lat","lng","setPosition","renderChildren","setContent","close","renderToString","render","propTypes","element","isRequired","object","bool","func","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport ReactDOM from 'react-dom'\nimport ReactDOMServer from 'react-dom/server'\n\nexport class InfoWindow extends React.Component {\n\n  componentDidMount() {\n    this.renderInfoWindow();\n  }\n\n  componentDidUpdate(prevProps) {\n    const {google, map} = this.props;\n\n    if (!google || !map) {\n      return;\n    }\n\n    if (map !== prevProps.map) {\n      this.renderInfoWindow();\n    }\n\n    if (this.props.position !== prevProps.position) {\n      this.updatePosition();\n    }\n\n    if (this.props.children !== prevProps.children) {\n      this.updateContent();\n    }\n\n    if ((this.props.visible !== prevProps.visible ||\n        this.props.marker !== prevProps.marker ||\n        this.props.position !== prevProps.position)) {\n        this.props.visible ?\n          this.openWindow() :\n          this.closeWindow();\n    }\n  }\n\n  renderInfoWindow() {\n    const {\n      map,\n      google,\n      mapCenter,\n      ...props\n    } = this.props;\n\n    if (!google || !google.maps) {\n      return;\n    }\n\n    const iw = this.infowindow = new google.maps.InfoWindow({\n      content: '',\n      ...props\n    });\n\n    google.maps.event\n      .addListener(iw, 'closeclick', this.onClose.bind(this))\n    google.maps.event\n      .addListener(iw, 'domready', this.onOpen.bind(this));\n  }\n\n  onOpen() {\n    if (this.props.onOpen) {\n      this.props.onOpen();\n    }\n  }\n\n  onClose() {\n    if (this.props.onClose) {\n      this.props.onClose();\n    }\n  }\n\n  openWindow() {\n    this.infowindow.open(this.props.map, this.props.marker);\n  }\n\n  updatePosition() {\n    let pos = this.props.position;\n    if (!(pos instanceof google.maps.LatLng)) {\n      pos = pos && new google.maps.LatLng(pos.lat, pos.lng);\n    }\n    this.infowindow.setPosition(pos);\n  }\n\n  updateContent() {\n    const content = this.renderChildren();\n    this.infowindow.setContent(content);\n  }\n\n  closeWindow() {\n    this.infowindow.close();\n  }\n\n  renderChildren() {\n    const {children} = this.props;\n    return ReactDOMServer.renderToString(children);\n  }\n\n  render() {\n    return null;\n  }\n}\n\nInfoWindow.propTypes = {\n  children: PropTypes.element.isRequired,\n  map: PropTypes.object,\n  marker: PropTypes.object,\n  position: PropTypes.object,\n  visible: PropTypes.bool,\n\n  // callbacks\n  onClose: PropTypes.func,\n  onOpen: PropTypes.func\n}\n\nInfoWindow.defaultProps = {\n  visible: false\n}\n\nexport default InfoWindow"]},"metadata":{},"sourceType":"module"}