{"ast":null,"code":"var _jsxFileName = \"/Users/j.kanlaya/Downloads/Mike/website/geovisualization/src/pages/Maps/mapsProv01.js\";\n// ============================= Google Maps TEST =============================\n// AIzaSyCoOZKGkK9Ili7RHCrB0dVNqhy6_e1yKyM\nimport React, { Component } from 'react';\nimport { Map, InfoWindow, Marker, GoogleApiWrapper } from 'google-maps-react';\nimport axios from \"axios\";\nimport NavbarMaps from '../../components/common/navbarMaps';\nimport './maps.css';\nconst mapStyles = {\n  top: '0',\n  buttom: '0',\n  width: 'auto',\n  height: 'auto',\n  left: '300px'\n};\n\nclass MapContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      showingInfoWindow: false,\n      activeMarker: {},\n      selectedPlace: {},\n      provinceResponse: [],\n      placeResponse: [],\n      placeTarget: [],\n      coor: {},\n      clickedPlace: '',\n      targetProvince: '',\n      threadId: '',\n      threadTitle: ''\n    };\n\n    this.onMarkerClick = (props, marker, e) => this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true,\n      clickedPlace: props.name\n    });\n\n    this.onMapClicked = props => {\n      if (this.state.showingInfoWindow) {\n        this.setState({\n          showingInfoWindow: false,\n          activeMarker: null\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    axios.get(`http://localhost:30011/getRankProvince`, {\n      params: {\n        provinceRank: 1\n      }\n    }).then(res => {\n      const provinceResponse = res.data[0];\n      this.setState({\n        provinceResponse\n      });\n      this.setState({\n        targetProvince: this.state.provinceResponse.provinceTh\n      });\n      console.log(this.state.targetProvince);\n    });\n    axios.get(`http://localhost:30011/getThreadData`, {\n      params: {\n        // provinceTh: this.state.targetProvince\n        provinceTh: \"สมุทรสงคราม\"\n      }\n    }).then(res => {\n      this.setState({\n        placeResponse: res.data\n      }); // console.log(res.data);\n\n      const latLon = this.state.placeResponse.map(row => {\n        return row.coor;\n      });\n      this.setState({\n        coor: latLon\n      });\n      console.log(this.state.coor);\n    });\n  }\n\n  // renderMarkers() {\n  //     return this.state.coor.map( i => {\n  //         return i.map( d => {\n  //             return <Marker\n  //                 key={ d }\n  //                 // onClick = { this.onMarkerClick }\n  //                 // title = { location.locName }\n  //                 // position = { JSON.parse(location.position) }\n  //                 // desc = { location.desc }\n  //                 // animation = { this.state.animation[i] }\n  //                 // name = { location.locName } />\n  //                 onClick={this.onMarkerClick}\n  //                 name={d.placeName}\n  //                 position={{lat: d.lat, lng: d.lon}} />\n  //             })\n  //     })\n  // }\n  renderMarkers() {\n    return this.state.coor.map(i => {\n      return /*#__PURE__*/React.createElement(Marker, {\n        key: i // onClick = { this.onMarkerClick }\n        // title = { location.locName }\n        // position = { JSON.parse(location.position) }\n        // desc = { location.desc }\n        // animation = { this.state.animation[i] }\n        // name = { location.locName } />\n        ,\n        onClick: this.onMarkerClick,\n        name: i.placeName,\n        position: {\n          lat: i.lat,\n          lng: i.lon\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 20\n        }\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      class: \"noscroll\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(NavbarMaps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"sidenav\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"sidePlaceName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 21\n      }\n    }, this.state.targetProvince), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"sideClickedPlace\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 21\n      }\n    }, this.state.clickedPlace)), /*#__PURE__*/React.createElement(Map, {\n      google: this.props.google,\n      style: mapStyles,\n      zoom: 10,\n      initialCenter: {\n        lat: 18.7756318,\n        lng: 100.7730417\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 21\n      }\n    }, \" \", this.renderMarkers(), \" \"), /*#__PURE__*/React.createElement(InfoWindow, {\n      marker: this.state.activeMarker,\n      visible: this.state.showingInfoWindow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 25\n      }\n    }, this.state.selectedPlace.name))));\n  }\n\n} // export default MapContainer;\n\n\nexport default GoogleApiWrapper({\n  // apiKey: ('AIzaSyCoOZKGkK9Ili7RHCrB0dVNqhy6_e1yKyM')\n  apiKey: 'AIzaSyDDViAvlzx_1iSnaUKtNNLr-OuJpSeypjI'\n})(MapContainer);","map":{"version":3,"sources":["/Users/j.kanlaya/Downloads/Mike/website/geovisualization/src/pages/Maps/mapsProv01.js"],"names":["React","Component","Map","InfoWindow","Marker","GoogleApiWrapper","axios","NavbarMaps","mapStyles","top","buttom","width","height","left","MapContainer","state","showingInfoWindow","activeMarker","selectedPlace","provinceResponse","placeResponse","placeTarget","coor","clickedPlace","targetProvince","threadId","threadTitle","onMarkerClick","props","marker","e","setState","name","onMapClicked","componentDidMount","get","params","provinceRank","then","res","data","provinceTh","console","log","latLon","map","row","renderMarkers","i","placeName","lat","lng","lon","render","google","apiKey"],"mappings":"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","sourcesContent":["// ============================= Google Maps TEST =============================\n// AIzaSyCoOZKGkK9Ili7RHCrB0dVNqhy6_e1yKyM\n\nimport React, { Component } from 'react';\nimport {Map, InfoWindow, Marker, GoogleApiWrapper} from 'google-maps-react';\nimport axios from \"axios\";\nimport NavbarMaps from '../../components/common/navbarMaps';\nimport './maps.css'\n\nconst mapStyles = {\n    top: '0',\n    buttom: '0',\n    width: 'auto',\n    height: 'auto',\n    left: '300px',\n};\nclass MapContainer extends Component {    \n    state = {\n        showingInfoWindow: false,\n        activeMarker: {},\n        selectedPlace: {},\n        provinceResponse:[],        \n        placeResponse:[],\n        placeTarget:[],\n        coor:{},\n        clickedPlace: '',\n        targetProvince: '',\n        threadId:'',\n        threadTitle: '',\n\n    };\n    \n    componentDidMount() {\n        axios.get(`http://localhost:30011/getRankProvince`, {\n            params: {\n                provinceRank: 1\n            }\n        })\n            .then(res => {\n                const provinceResponse = res.data[0];\n                this.setState({ provinceResponse });\n                this.setState({ targetProvince: this.state.provinceResponse.provinceTh })\n                console.log(this.state.targetProvince);\n        })\n\n        axios.get(`http://localhost:30011/getThreadData`, {\n            params: {\n                // provinceTh: this.state.targetProvince\n                provinceTh: \"สมุทรสงคราม\"\n            }\n        })\n        .then(res => {\n            this.setState({ placeResponse: res.data });\n            // console.log(res.data);\n            const latLon = this.state.placeResponse.map(row => {\n                return row.coor\n            })\n            this.setState({coor: latLon})\n            console.log(this.state.coor);\n\n            \n\n        })  \n    }\n\n    onMarkerClick = (props, marker, e) =>\n    this.setState({\n        selectedPlace: props,\n        activeMarker: marker,\n        showingInfoWindow: true,\n        clickedPlace: props.name,\n    });\n\n    onMapClicked = (props) => {\n        if (this.state.showingInfoWindow) {\n            this.setState({\n                showingInfoWindow: false,\n                activeMarker: null\n            })\n        }\n    };\n\n    // renderMarkers() {\n    //     return this.state.coor.map( i => {\n    //         return i.map( d => {\n    //             return <Marker\n    //                 key={ d }\n    //                 // onClick = { this.onMarkerClick }\n    //                 // title = { location.locName }\n    //                 // position = { JSON.parse(location.position) }\n    //                 // desc = { location.desc }\n    //                 // animation = { this.state.animation[i] }\n    //                 // name = { location.locName } />\n    //                 onClick={this.onMarkerClick}\n    //                 name={d.placeName}\n    //                 position={{lat: d.lat, lng: d.lon}} />\n    //             })\n    //     })\n    // }\n\n    renderMarkers() {\n        return this.state.coor.map( i => {\n            return <Marker\n                key={ i }\n                // onClick = { this.onMarkerClick }\n                // title = { location.locName }\n                // position = { JSON.parse(location.position) }\n                // desc = { location.desc }\n                // animation = { this.state.animation[i] }\n                // name = { location.locName } />\n                onClick={this.onMarkerClick}\n                name={i.placeName}\n                position={{lat: i.lat, lng: i.lon}} />\n            })\n    }\n\n\n    render() {\n        return (  \n            <div class=\"noscroll\">\n                <NavbarMaps />\n                <div class=\"sidenav\">\n                    <div class=\"sidePlaceName\">{this.state.targetProvince}</div>\n                    <div class=\"sideClickedPlace\">{this.state.clickedPlace}</div>\n\n                </div>\n\n                <Map google={this.props.google}\n                    style={mapStyles}\n                    zoom={10}\n                    initialCenter={{lat: 18.7756318, lng: 100.7730417}}\n                >\n                    <div> {this.renderMarkers()} </div>\n                    {/* {this.state.coor.map( thread => {\n                        thread.map( d => (\n                            <Marker\n                                onClick={this.onMarkerClick}\n                                name={d.placeName}\n                                position={{lat: d.lat, lng: d.lon}} \n                            />\n                        ))})} */}\n\n                    {/* <Marker\n                        onClick={this.onMarkerClick}\n                        name={\"test\"}\n                        position={{lat: 18.7749045, lng: 100.771892}} \n                    /> */}\n\n                    <InfoWindow\n                        marker={this.state.activeMarker}\n                        visible={this.state.showingInfoWindow}>\n                        <p>{this.state.selectedPlace.name}</p>\n                    </InfoWindow>\n                </Map>\n            </div>\n        );\n    }\n}\n\n// export default MapContainer;\n\nexport default GoogleApiWrapper({\n    // apiKey: ('AIzaSyCoOZKGkK9Ili7RHCrB0dVNqhy6_e1yKyM')\n    apiKey: ('AIzaSyDDViAvlzx_1iSnaUKtNNLr-OuJpSeypjI')\n})(MapContainer)"]},"metadata":{},"sourceType":"module"}