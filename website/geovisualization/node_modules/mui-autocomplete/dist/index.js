"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _TextField = _interopRequireDefault(require("@material-ui/core/TextField"));

var _list = _interopRequireDefault(require("./list"));

var _action = _interopRequireDefault(require("./action"));

var _apicall = _interopRequireDefault(require("./apicall"));

var _static = _interopRequireDefault(require("./static"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function MuiAutocomplete(props) {
  var _useState = (0, _react.useState)('search'),
      _useState2 = _slicedToArray(_useState, 2),
      action = _useState2[0],
      setAction = _useState2[1];

  var _useState3 = (0, _react.useState)(''),
      _useState4 = _slicedToArray(_useState3, 2),
      value = _useState4[0],
      setValue = _useState4[1];

  var _useState5 = (0, _react.useState)(''),
      _useState6 = _slicedToArray(_useState5, 2),
      error = _useState6[0],
      setError = _useState6[1];

  var _useState7 = (0, _react.useState)([]),
      _useState8 = _slicedToArray(_useState7, 2),
      items = _useState8[0],
      setItems = _useState8[1];

  var _useState9 = (0, _react.useState)(false),
      _useState10 = _slicedToArray(_useState9, 2),
      isOpen = _useState10[0],
      setIsOpen = _useState10[1];

  var _useState11 = (0, _react.useState)(null),
      _useState12 = _slicedToArray(_useState11, 2),
      anchorEl = _useState12[0],
      setAnchorEl = _useState12[1];

  var popperRef = _react["default"].useRef(); // Api hook


  var _useApi = (0, _apicall["default"])(props.seturl, setAction, setError, setItems, setIsOpen, setValue),
      fetchAll = _useApi.fetchAll,
      fetchById = _useApi.fetchById; // Static data hook(local data)


  var _useStaticCall = (0, _static["default"])(setAction, setError, setItems, setIsOpen, setValue),
      staticCall = _useStaticCall.staticCall,
      dataFindbyId = _useStaticCall.dataFindbyId; // set the default value's data;


  (0, _react.useEffect)(function () {
    if (props.setvalue) {
      setDefaultValue();
    }
  }, [props.setvalue]);

  function setDefaultValue() {
    if (props.setdata) {
      //passing params (default value, default data)
      //Using Static hook.
      dataFindbyId(props.setvalue, props.setdata, props.template.title);
    } else if (props.geturl) {
      //Using API hook
      fetchById(props.geturl, props.setvalue, props.template.title);
    } else {
      // if nothing find in static or at api
      // then set default value empty;
      setValue('');
    }
  }

  function onChange(event) {
    event.persist();
    var value = event.target.value;
    setValue(value);
    setError('');

    if (props.handleChange) {
      props.handleChange(event);
    }

    if (value === '' || value === null) {
      return onClose();
    }

    if (props.setdata) {
      //passing params (default value, default data)
      //Using Static hook.
      staticCall(props.setdata, value, props.template.title);
      setAnchorEl(true);
    } else if (props.seturl) {
      //Using API hook
      fetchAll(value);
      setAnchorEl(true);
    } else {
      // if nothing find in static or at api
      // then set default value empty;
      setError('please populate setdata prop.');
    }
  } //To clear the TextField value and reset to inital states.


  function onClear() {
    //clients function
    if (props.handleClear) {
      props.handleClear();
    }

    ;
    setValue('');
    setError('');
    onClose();
  }

  function onItemClick(event, item) {
    //setting the value data-value of item into textfield.
    setValue(event.currentTarget.dataset.value); //clients function

    if (props.handleItemClick) {
      props.handleItemClick(item);
    }

    onClose();
  } //Mui Menu: set Menu state.


  function onClose() {
    setIsOpen(false);
    setAnchorEl(null);
  } //returning TextField pacakge.


  return _react["default"].createElement("div", {
    id: "muia-container",
    ref: popperRef
  }, _react["default"].createElement(_TextField["default"], {
    error: error !== '' && true,
    id: "muia-".concat(props.name),
    label: props.placeholder,
    name: props.name,
    value: value,
    onChange: onChange,
    margin: "normal",
    variant: props.variant,
    fullWidth: true,
    autoComplete: "off",
    helperText: error,
    InputProps: {
      endAdornment: _react["default"].createElement(_action["default"], {
        type: action,
        onClear: onClear
      })
    }
  }), _react["default"].createElement(_list["default"], {
    anchorEl: popperRef.current,
    items: items,
    template: props.template,
    isOpen: isOpen,
    onClose: onClose,
    onItemClick: onItemClick
  }));
}

var _default = MuiAutocomplete;
exports["default"] = _default;